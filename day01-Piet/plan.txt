This will be a file describing my idea for the solution in Piet.
I think it will be much easier if I first write out the
approximate commands, and then do the painting :)

I want the stack to contain (from bottom to top): 
[first, sum (initially 0), previous (initally first)]

To read digit by digit you have to convert from ASCII to 
numbers by subtracting 48 each time. This block should be re used.

Also a newline should be represented by a 10 char, so then branch to end

1. Setting up problem
I want the stack to contain (from bottom to top): 
[first, 0, first]

2. Looping over digits
Stack (from bottom to top): 
[first, sum, previous]

- Read input digit "next"
	- Read char, sub 48
	- Copy and add 1
	- Check if copy > 0 to assure not newline!
- Push to stack, copy, roll 1 3 to save value ([first, sum, next, prev, next])
- If same (diff && not):
	- copy and roll 1 3 ([first, next, sum, next])
	- add "next" to sum
	- roll 2 1 to bring up next ([first, sum, next])
- else:
	- (Switch tp get CC correct)
	- Do nothing ([first, sum, next]) (old consumed in subtraction)
- Keep repeating until you cannot read a digit anymore

3. Comparing first and last for circular list
- copy
- roll 3 3 -> ([sum, last, last, first])
- If same (diff && not):
	- add last to sum
- else:
	- Discard last

4. Printing the output
- The stack should only be sum, so print it (make sure to print integer)
- Trap the pointer in some enclosure

TODO: Something wrong with the comparing first and last